{
  "version": 3,
  "sources": ["../../../../OneDrive/Documents/projects/TLDRit/netlify/functions/rss-proxy.js"],
  "sourceRoot": "C:/Users/chris/AppData/Local/Temp/tmp-26040-S0O4ybtV8RDh",
  "sourcesContent": ["const fetch = require('node-fetch');\r\n\r\nexports.handler = async (event, context) => {\r\n  // Enable CORS for all origins\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n    'Cache-Control': 'public, max-age=300', // Cache for 5 minutes\r\n  };\r\n\r\n  // Handle preflight requests\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: '',\r\n    };\r\n  }\r\n\r\n  // Only allow GET requests\r\n  if (event.httpMethod !== 'GET') {\r\n    return {\r\n      statusCode: 405,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Method not allowed',\r\n        message: 'Only GET requests are supported'\r\n      }),\r\n    };\r\n  }\r\n\r\n  const { url } = event.queryStringParameters || {};\r\n\r\n  // Validate URL parameter\r\n  if (!url) {\r\n    return {\r\n      statusCode: 400,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Missing required parameter',\r\n        message: 'URL parameter is required'\r\n      }),\r\n    };\r\n  }\r\n\r\n  // Validate URL format\r\n  try {\r\n    new URL(url);\r\n  } catch (error) {\r\n    return {\r\n      statusCode: 400,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Invalid URL format',\r\n        message: 'The provided URL is not valid'\r\n      }),\r\n    };\r\n  }\r\n\r\n  // Security: Only allow RSS/XML feeds from known domains\r\n  const allowedDomains = [\r\n    'feeds.feedburner.com',\r\n    'feeds.bbci.co.uk',\r\n    'rss.cnn.com',\r\n    'cointelegraph.com',\r\n    'feeds.npr.org',\r\n    'rss.espn.com',\r\n    'techcrunch.com',\r\n    'variety.com',\r\n    'reuters.com',\r\n    'venturebeat.com'\r\n  ];\r\n\r\n  const urlObj = new URL(url);\r\n  const isAllowedDomain = allowedDomains.some(domain => \r\n    urlObj.hostname === domain || urlObj.hostname.endsWith('.' + domain)\r\n  );\r\n\r\n  if (!isAllowedDomain) {\r\n    console.warn(`Blocked request to unauthorized domain: ${urlObj.hostname}`);\r\n    return {\r\n      statusCode: 403,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Domain not allowed',\r\n        message: 'RSS feeds are only allowed from authorized news sources'\r\n      }),\r\n    };\r\n  }\r\n\r\n  try {\r\n    console.log(`[RSS Proxy] Fetching RSS feed: ${url}`);\r\n    const startTime = Date.now();\r\n    \r\n    // Fetch with timeout and proper headers\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout\r\n    \r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'User-Agent': 'TLDRit RSS Reader/1.0 (https://tldrit.netlify.app)',\r\n        'Accept': 'application/rss+xml, application/xml, text/xml, application/atom+xml',\r\n        'Accept-Encoding': 'gzip, deflate',\r\n        'Cache-Control': 'no-cache',\r\n      },\r\n      timeout: 15000,\r\n      signal: controller.signal,\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n    const fetchTime = Date.now() - startTime;\r\n\r\n    if (!response.ok) {\r\n      console.error(`[RSS Proxy] HTTP error ${response.status} for ${url}`);\r\n      throw new Error(`HTTP error! status: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const contentType = response.headers.get('content-type') || '';\r\n    if (!contentType.includes('xml') && !contentType.includes('rss') && !contentType.includes('atom')) {\r\n      console.warn(`[RSS Proxy] Unexpected content type: ${contentType} for ${url}`);\r\n    }\r\n\r\n    const content = await response.text();\r\n\r\n    if (!content || content.trim().length === 0) {\r\n      throw new Error('Empty response content');\r\n    }\r\n\r\n    // Basic validation that we got XML content\r\n    if (!content.includes('<rss') && !content.includes('<feed') && !content.includes('<?xml')) {\r\n      throw new Error('Response does not appear to be valid RSS/XML content');\r\n    }\r\n\r\n    console.log(`[RSS Proxy] Successfully fetched ${content.length} bytes in ${fetchTime}ms from ${url}`);\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        contents: content,\r\n        status: {\r\n          url: url,\r\n          content_type: response.headers.get('content-type'),\r\n          http_code: response.status,\r\n          content_length: content.length,\r\n          fetch_time_ms: fetchTime,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      }),\r\n    };\r\n\r\n  } catch (error) {\r\n    const errorMessage = error.message || 'Unknown error occurred';\r\n    console.error(`[RSS Proxy] Error fetching RSS feed from ${url}:`, error);\r\n    \r\n    // Determine appropriate status code based on error type\r\n    let statusCode = 500;\r\n    if (error.name === 'AbortError') {\r\n      statusCode = 408; // Request Timeout\r\n    } else if (errorMessage.includes('HTTP error')) {\r\n      statusCode = 502; // Bad Gateway\r\n    } else if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\r\n      statusCode = 503; // Service Unavailable\r\n    }\r\n    \r\n    return {\r\n      statusCode,\r\n      headers,\r\n      body: JSON.stringify({\r\n        error: 'Failed to fetch RSS feed',\r\n        message: errorMessage,\r\n        url: url,\r\n        timestamp: new Date().toISOString(),\r\n      }),\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
