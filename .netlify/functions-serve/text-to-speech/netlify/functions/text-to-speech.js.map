{
  "version": 3,
  "sources": ["../../../../OneDrive/Documents/projects/TLDRit/netlify/functions/text-to-speech.mjs"],
  "sourceRoot": "C:/Users/chris/AppData/Local/Temp/tmp-15884-SmajdKTrbFeu",
  "sourcesContent": ["import fetch from 'node-fetch';\r\nimport { createClient } from '@supabase/supabase-js';\r\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);\r\n\r\nexport const handler = async function(event, context) {\r\n  // Handle CORS\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n  };\r\n\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: '',\r\n    };\r\n  }\r\n\r\n  if (event.httpMethod !== 'POST') {\r\n    return {\r\n      statusCode: 405,\r\n      headers,\r\n      body: JSON.stringify({ error: 'Method not allowed' }),\r\n    };\r\n  }\r\n\r\n  try {\r\n    const { text } = JSON.parse(event.body);\r\n    const authHeader = event.headers.authorization;\r\n\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return {\r\n        statusCode: 401,\r\n        headers,\r\n        body: JSON.stringify({ error: 'Unauthorized' }),\r\n      };\r\n    }\r\n\r\n    // Get user from JWT\r\n    const jwt = authHeader.replace('Bearer ', '');\r\n    const { data: { user }, error: userError } = await supabase.auth.getUser(jwt);\r\n    if (userError || !user) {\r\n      return {\r\n        statusCode: 401,\r\n        headers,\r\n        body: JSON.stringify({ error: 'Invalid user token' }),\r\n      };\r\n    }\r\n\r\n    // Fetch user profile\r\n    const { data: profile, error: profileError } = await supabase\r\n      .from('profiles')\r\n      .select('plan, credits')\r\n      .eq('id', user.id)\r\n      .single();\r\n\r\n    if (profileError || !profile) {\r\n      return {\r\n        statusCode: 403,\r\n        headers,\r\n        body: JSON.stringify({ error: 'No profile found' }),\r\n      };\r\n    }\r\n\r\n    // Check plan/credits\r\n    if (profile.plan !== 'pro' && profile.credits <= 0) {\r\n      return {\r\n        statusCode: 403,\r\n        headers,\r\n        body: JSON.stringify({ error: 'No credits left or not pro.' }),\r\n      };\r\n    }\r\n\r\n    // If not pro, decrement credits\r\n    if (profile.plan !== 'pro') {\r\n      await supabase\r\n        .from('profiles')\r\n        .update({ credits: profile.credits - 1 })\r\n        .eq('id', user.id);\r\n    }\r\n\r\n    // Use OpenAI's text-to-speech API\r\n    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\r\n    \r\n    if (!OPENAI_API_KEY) {\r\n      throw new Error('OpenAI API key not configured');\r\n    }\r\n\r\n    // Choose voice based on plan\r\n    const voice = profile.plan === 'pro' ? 'alloy' : 'echo';\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/audio/speech', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        model: 'tts-1',\r\n        input: text,\r\n        voice: voice,\r\n        response_format: 'mp3',\r\n      }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`OpenAI API error: ${response.status}`);\r\n    }\r\n\r\n    // Get the audio data\r\n    const audioBuffer = await response.buffer();\r\n    \r\n    // Upload audio to Supabase storage\r\n    const fileName = `audio/${user.id}/${Date.now()}.mp3`;\r\n    const { data: uploadData, error: uploadError } = await supabase.storage\r\n      .from('tldrit')\r\n      .upload(fileName, audioBuffer, {\r\n        contentType: 'audio/mp3',\r\n        cacheControl: '3600',\r\n        upsert: false\r\n      });\r\n\r\n    if (uploadError) {\r\n      throw new Error(`Storage upload error: ${uploadError.message}`);\r\n    }\r\n\r\n    // Get public URL for the uploaded file\r\n    const { data: { publicUrl } } = supabase.storage\r\n      .from('tldrit')\r\n      .getPublicUrl(fileName);\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: JSON.stringify({\r\n        audioUrl: publicUrl,\r\n      }),\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('Error generating audio:', error);\r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Failed to generate audio',\r\n        details: error.message \r\n      }),\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["fetch"]
}
